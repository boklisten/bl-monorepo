// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type {
  MakeTuyauRequest,
  MakeNonSerializedTuyauResponse,
} from "@tuyau/utils/types";
import type { InferInput } from "@vinejs/vine/types";

type TokenPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["tokenValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/tokens_controller.ts").default["token"],
    true
  >;
};
type V2TokenPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["tokenValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/tokens_controller.ts").default["tokenV2"],
    true
  >;
};
type AuthIdRedirectGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/social_controller.ts").default["redirect"],
    false
  >;
};
type AuthIdCallbackGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/social_controller.ts").default["callback"],
    false
  >;
};
type AuthLocalLoginPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["localAuthValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/local_controller.ts").default["login"],
    true
  >;
};
type AuthLocalRegisterPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["registerValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/local_controller.ts").default["register"],
    true
  >;
};
type ForgotPasswordPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["forgotPasswordValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/password_reset_controller.ts").default["forgotPasswordSend"],
    true
  >;
};
type ResetPasswordPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/auth_validators.ts"))["passwordResetValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/auth/password_reset_controller.ts").default["resetPasswordStore"],
    true
  >;
};
type WaitingListEntriesGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/waiting_list_entries_controller.ts").default["getAllWaitingListEntries"],
    false
  >;
};
type WaitingListEntriesPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/waiting_list.ts"))["waitingListEntryValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/waiting_list_entries_controller.ts").default["addWaitingListEntry"],
    true
  >;
};
type WaitinglistentriesIdDelete = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/waiting_list_entries_controller.ts").default["deleteWaitingListEntry"],
    false
  >;
};
type RemindersCountrecipientsPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/reminder.ts"))["reminderValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/reminders_controller.ts").default["countRecipients"],
    true
  >;
};
type RemindersSendPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/reminder.ts"))["reminderValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/reminders_controller.ts").default["remind"],
    true
  >;
};
type V2BranchesPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/branch.ts"))["branchValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/branches_controller.ts").default["add"],
    true
  >;
};
type V2BranchesIdPatch = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/branch.ts"))["branchValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/branches_controller.ts").default["update"],
    true
  >;
};
type V2BranchesMembershipsPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/branch_membership.ts"))["branchMembershipValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/branches_controller.ts").default["uploadMemberships"],
    true
  >;
};
type V2BranchesSubjectchoicesPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/subject_choices.ts"))["subjectChoicesValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/branches_controller.ts").default["uploadSubjectChoices"],
    true
  >;
};
type EmailsSendPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/mail_template_sender.ts"))["emailTemplateSenderValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/mail_template_sender_controller.ts").default["sendEmails"],
    true
  >;
};
type V2OrdersOpenordersGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/orders_controller.ts").default["getOpenOrders"],
    false
  >;
};
type V2OrdersCancelorderitemPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/cancel_order_item_validator.ts"))["cancelOrderItemValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/orders_controller.ts").default["cancelOrderItem"],
    true
  >;
};
type V2UserdetailsCheckphonenumberalreadyregisteredPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/check_phone_number.ts"))["checkPhoneNumberValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/user_details_controller.ts").default["checkPhoneNumberAlreadyRegistered"],
    true
  >;
};
type EditableTextsGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/editable_texts_controller.ts").default["getAll"],
    false
  >;
};
type EditabletextsKeyIdGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/editable_texts_controller.ts").default["getByKey"],
    false
  >;
};
type EditableTextsPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/editable_texts_validator.ts"))["editableTextsValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/editable_texts_controller.ts").default["store"],
    true
  >;
};
type EditabletextsIdPatch = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/editable_texts_controller.ts").default["update"],
    false
  >;
};
type EditabletextsIdDelete = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/editable_texts_controller.ts").default["destroy"],
    false
  >;
};
type QuestionsAndAnswersGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/questions_and_answers_controller.ts").default["getAll"],
    false
  >;
};
type QuestionsAndAnswersPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/questions_and_answers_validator.ts"))["questionsAndAnswersValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/questions_and_answers_controller.ts").default["store"],
    true
  >;
};
type QuestionsandanswersIdPatch = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/questions_and_answers_validator.ts"))["questionsAndAnswersValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/questions_and_answers_controller.ts").default["update"],
    true
  >;
};
type QuestionsandanswersIdDelete = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/questions_and_answers_controller.ts").default["destroy"],
    false
  >;
};
type EmailValidationsPost = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/email_validations_controller.ts").default["create"],
    false
  >;
};
type EmailvalidationsIdGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/email_validations_controller.ts").default["confirm"],
    false
  >;
};
type PublicblidlookupIdGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/public_blid_lookup_controller.ts").default["lookup"],
    false
  >;
};
type MatchesGeneratePost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/matches.ts"))["matchGenerateValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/matches/matches_controller.ts").default["generate"],
    true
  >;
};
type MatchesNotifyPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/matches.ts"))["matchNotifyValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/matches/matches_controller.ts").default["notify"],
    true
  >;
};
type UsermatchesLockPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/matches.ts"))["matchLockValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/matches/matches_controller.ts").default["lock"],
    true
  >;
};
type MatchesMeGetHead = {
  request: unknown;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/matches/matches_controller.ts").default["getMyMatches"],
    false
  >;
};
type MatchesTransferitemPost = {
  request: MakeTuyauRequest<
    InferInput<
      (typeof import("../app/validators/matches.ts"))["matchTransferValidator"]
    >
  >;
  response: MakeNonSerializedTuyauResponse<
    import("../app/controllers/matches/matches_controller.ts").default["transferItem"],
    true
  >;
};
export interface ApiDefinition {
  token: {
    $url: {};
    $post: TokenPost;
  };
  v2: {
    token: {
      $url: {};
      $post: V2TokenPost;
    };
    branches: {
      $url: {};
      $post: V2BranchesPost;
      ":id": {
        $url: {};
        $patch: V2BranchesIdPatch;
      };
      memberships: {
        $url: {};
        $post: V2BranchesMembershipsPost;
      };
      subject_choices: {
        $url: {};
        $post: V2BranchesSubjectchoicesPost;
      };
    };
    orders: {
      open_orders: {
        $url: {};
        $get: V2OrdersOpenordersGetHead;
        $head: V2OrdersOpenordersGetHead;
      };
      cancel_order_item: {
        $url: {};
        $post: V2OrdersCancelorderitemPost;
      };
    };
    userdetails: {
      check_phone_number_already_registered: {
        $url: {};
        $post: V2UserdetailsCheckphonenumberalreadyregisteredPost;
      };
    };
  };
  auth: {
    ":provider": {
      redirect: {
        $url: {};
        $get: AuthIdRedirectGetHead;
        $head: AuthIdRedirectGetHead;
      };
      callback: {
        $url: {};
        $get: AuthIdCallbackGetHead;
        $head: AuthIdCallbackGetHead;
      };
    };
    local: {
      login: {
        $url: {};
        $post: AuthLocalLoginPost;
      };
      register: {
        $url: {};
        $post: AuthLocalRegisterPost;
      };
    };
  };
  "forgot-password": {
    $url: {};
    $post: ForgotPasswordPost;
  };
  "reset-password": {
    $url: {};
    $post: ResetPasswordPost;
  };
  waiting_list_entries: {
    $url: {};
    $get: WaitingListEntriesGetHead;
    $head: WaitingListEntriesGetHead;
    $post: WaitingListEntriesPost;
    ":id": {
      $url: {};
      $delete: WaitinglistentriesIdDelete;
    };
  };
  reminders: {
    count_recipients: {
      $url: {};
      $post: RemindersCountrecipientsPost;
    };
    send: {
      $url: {};
      $post: RemindersSendPost;
    };
  };
  emails: {
    send: {
      $url: {};
      $post: EmailsSendPost;
    };
  };
  editable_texts: {
    $url: {};
    $get: EditableTextsGetHead;
    $head: EditableTextsGetHead;
    key: {
      ":key": {
        $url: {};
        $get: EditabletextsKeyIdGetHead;
        $head: EditabletextsKeyIdGetHead;
      };
    };
    $post: EditableTextsPost;
    ":id": {
      $url: {};
      $patch: EditabletextsIdPatch;
      $delete: EditabletextsIdDelete;
    };
  };
  questions_and_answers: {
    $url: {};
    $get: QuestionsAndAnswersGetHead;
    $head: QuestionsAndAnswersGetHead;
    $post: QuestionsAndAnswersPost;
    ":id": {
      $url: {};
      $patch: QuestionsandanswersIdPatch;
      $delete: QuestionsandanswersIdDelete;
    };
  };
  email_validations: {
    $url: {};
    $post: EmailValidationsPost;
    ":id": {
      $url: {};
      $get: EmailvalidationsIdGetHead;
      $head: EmailvalidationsIdGetHead;
    };
  };
  public_blid_lookup: {
    ":blid": {
      $url: {};
      $get: PublicblidlookupIdGetHead;
      $head: PublicblidlookupIdGetHead;
    };
  };
  matches: {
    generate: {
      $url: {};
      $post: MatchesGeneratePost;
    };
    notify: {
      $url: {};
      $post: MatchesNotifyPost;
    };
    me: {
      $url: {};
      $get: MatchesMeGetHead;
      $head: MatchesMeGetHead;
    };
    transfer_item: {
      $url: {};
      $post: MatchesTransferitemPost;
    };
  };
  user_matches: {
    lock: {
      $url: {};
      $post: UsermatchesLockPost;
    };
  };
}
const routes = [
  {
    params: [],
    name: "auth.token",
    path: "/token",
    method: ["POST"],
    types: {} as TokenPost,
  },
  {
    params: [],
    name: "v2.auth.token",
    path: "/v2/token",
    method: ["POST"],
    types: {} as V2TokenPost,
  },
  {
    params: ["provider"],
    name: "auth.social.redirect",
    path: "/auth/:provider/redirect",
    method: ["GET", "HEAD"],
    types: {} as AuthIdRedirectGetHead,
  },
  {
    params: ["provider"],
    name: "auth.social.callback",
    path: "/auth/:provider/callback",
    method: ["GET", "HEAD"],
    types: {} as AuthIdCallbackGetHead,
  },
  {
    params: [],
    name: "auth.local.login",
    path: "/auth/local/login",
    method: ["POST"],
    types: {} as AuthLocalLoginPost,
  },
  {
    params: [],
    name: "auth.local.register",
    path: "/auth/local/register",
    method: ["POST"],
    types: {} as AuthLocalRegisterPost,
  },
  {
    params: [],
    name: "auth.password.forgot.send",
    path: "/forgot-password",
    method: ["POST"],
    types: {} as ForgotPasswordPost,
  },
  {
    params: [],
    name: "auth.password.reset.store",
    path: "/reset-password",
    method: ["POST"],
    types: {} as ResetPasswordPost,
  },
  {
    params: [],
    name: "waiting_list_entries.getAll",
    path: "/waiting_list_entries",
    method: ["GET", "HEAD"],
    types: {} as WaitingListEntriesGetHead,
  },
  {
    params: [],
    name: "waiting_list_entries.add",
    path: "/waiting_list_entries",
    method: ["POST"],
    types: {} as WaitingListEntriesPost,
  },
  {
    params: ["id"],
    name: "waiting_list_entries.delete",
    path: "/waiting_list_entries/:id",
    method: ["DELETE"],
    types: {} as WaitinglistentriesIdDelete,
  },
  {
    params: [],
    name: "reminders.count_recipients",
    path: "/reminders/count_recipients",
    method: ["POST"],
    types: {} as RemindersCountrecipientsPost,
  },
  {
    params: [],
    name: "reminders.send",
    path: "/reminders/send",
    method: ["POST"],
    types: {} as RemindersSendPost,
  },
  {
    params: [],
    name: "branches.add",
    path: "/v2/branches",
    method: ["POST"],
    types: {} as V2BranchesPost,
  },
  {
    params: ["id"],
    name: "branches.update",
    path: "/v2/branches/:id",
    method: ["PATCH"],
    types: {} as V2BranchesIdPatch,
  },
  {
    params: [],
    name: "branches.addMemberships",
    path: "/v2/branches/memberships",
    method: ["POST"],
    types: {} as V2BranchesMembershipsPost,
  },
  {
    params: [],
    name: "branches.addSubjectChoices",
    path: "/v2/branches/subject_choices",
    method: ["POST"],
    types: {} as V2BranchesSubjectchoicesPost,
  },
  {
    params: [],
    name: "emails.send",
    path: "/emails/send",
    method: ["POST"],
    types: {} as EmailsSendPost,
  },
  {
    params: [],
    name: "open_orders.get",
    path: "/v2/orders/open_orders",
    method: ["GET", "HEAD"],
    types: {} as V2OrdersOpenordersGetHead,
  },
  {
    params: [],
    name: "open_orders.cancel",
    path: "/v2/orders/cancel_order_item",
    method: ["POST"],
    types: {} as V2OrdersCancelorderitemPost,
  },
  {
    params: [],
    name: "userdetails.checkPhoneNumberAlreadyRegistered",
    path: "/v2/userdetails/check_phone_number_already_registered",
    method: ["POST"],
    types: {} as V2UserdetailsCheckphonenumberalreadyregisteredPost,
  },
  {
    params: [],
    name: "editable_texts.getAll",
    path: "/editable_texts",
    method: ["GET", "HEAD"],
    types: {} as EditableTextsGetHead,
  },
  {
    params: ["key"],
    name: "editable_texts.getByKey",
    path: "/editable_texts/key/:key",
    method: ["GET", "HEAD"],
    types: {} as EditabletextsKeyIdGetHead,
  },
  {
    params: [],
    name: "editable_texts.store",
    path: "/editable_texts",
    method: ["POST"],
    types: {} as EditableTextsPost,
  },
  {
    params: ["id"],
    name: "editable_texts.update",
    path: "/editable_texts/:id",
    method: ["PATCH"],
    types: {} as EditabletextsIdPatch,
  },
  {
    params: ["id"],
    name: "editable_texts.destroy",
    path: "/editable_texts/:id",
    method: ["DELETE"],
    types: {} as EditabletextsIdDelete,
  },
  {
    params: [],
    name: "questions_and_answers.getAll",
    path: "/questions_and_answers",
    method: ["GET", "HEAD"],
    types: {} as QuestionsAndAnswersGetHead,
  },
  {
    params: [],
    name: "questions_and_answers.store",
    path: "/questions_and_answers",
    method: ["POST"],
    types: {} as QuestionsAndAnswersPost,
  },
  {
    params: ["id"],
    name: "questions_and_answers.update",
    path: "/questions_and_answers/:id",
    method: ["PATCH"],
    types: {} as QuestionsandanswersIdPatch,
  },
  {
    params: ["id"],
    name: "questions_and_answers.destroy",
    path: "/questions_and_answers/:id",
    method: ["DELETE"],
    types: {} as QuestionsandanswersIdDelete,
  },
  {
    params: [],
    name: "email_validations.create",
    path: "/email_validations",
    method: ["POST"],
    types: {} as EmailValidationsPost,
  },
  {
    params: ["id"],
    name: "email_validations.confirm",
    path: "/email_validations/:id",
    method: ["GET", "HEAD"],
    types: {} as EmailvalidationsIdGetHead,
  },
  {
    params: ["blid"],
    name: "blid.lookup",
    path: "/public_blid_lookup/:blid",
    method: ["GET", "HEAD"],
    types: {} as PublicblidlookupIdGetHead,
  },
  {
    params: [],
    name: "matches.generate",
    path: "/matches/generate",
    method: ["POST"],
    types: {} as MatchesGeneratePost,
  },
  {
    params: [],
    name: "matches.notify",
    path: "/matches/notify",
    method: ["POST"],
    types: {} as MatchesNotifyPost,
  },
  {
    params: [],
    name: "matches.lock",
    path: "/user_matches/lock",
    method: ["POST"],
    types: {} as UsermatchesLockPost,
  },
  {
    params: [],
    name: "matches.me",
    path: "/matches/me",
    method: ["GET", "HEAD"],
    types: {} as MatchesMeGetHead,
  },
  {
    params: [],
    name: "matches.transfer_item",
    path: "/matches/transfer_item",
    method: ["POST"],
    types: {} as MatchesTransferitemPost,
  },
  {
    params: ["id"],
    name: "collection.branches.getId",
    path: "/branches/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.branches.getAll",
    path: "/branches",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.branches.post",
    path: "/branches",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.branches.patch",
    path: "/branches/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.branchitems.getId",
    path: "/branchitems/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.branchitems.post",
    path: "/branchitems",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.branchitems.patch",
    path: "/branchitems/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.branchitems.getAll",
    path: "/branchitems",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.branchitems.delete",
    path: "/branchitems/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.customeritems.getId",
    path: "/customeritems/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.customeritems.patch",
    path: "/customeritems/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.customeritems.post",
    path: "/customeritems",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.customeritems.operation.generate-report.post",
    path: "/customeritems/generate-report",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.customeritems.getAll",
    path: "/customeritems",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.deliveries.post",
    path: "/deliveries",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.deliveries.operation.postal-code-lookup.post",
    path: "/deliveries/postal-code-lookup",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.deliveries.getAll",
    path: "/deliveries",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.deliveries.getId",
    path: "/deliveries/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.deliveries.patch",
    path: "/deliveries/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.deliveries.delete",
    path: "/deliveries/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.items.getId",
    path: "/items/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.items.getAll",
    path: "/items",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.items.post",
    path: "/items",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.items.patch",
    path: "/items/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.openinghours.getId",
    path: "/openinghours/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.openinghours.getAll",
    path: "/openinghours",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.openinghours.post",
    path: "/openinghours",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.openinghours.patch",
    path: "/openinghours/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.orders.post",
    path: "/orders",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.orders.operation.rapid-handout.post",
    path: "/orders/rapid-handout",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.delete",
    path: "/orders/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.patch",
    path: "/orders/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.operation.place.patch",
    path: "/orders/:id/place",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.operation.confirm.patch",
    path: "/orders/:id/confirm",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.getId",
    path: "/orders/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.operation.receipt.getId",
    path: "/orders/:id/receipt",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.operation.agreement.getId",
    path: "/orders/:id/agreement",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.orders.operation.get_customer_orders.getId",
    path: "/orders/:id/get_customer_orders",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.orders.getAll",
    path: "/orders",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.payments.post",
    path: "/payments",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.payments.getAll",
    path: "/payments",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.payments.getId",
    path: "/payments/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.payments.patch",
    path: "/payments/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.payments.delete",
    path: "/payments/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.getId",
    path: "/userdetails/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.operation.valid.getId",
    path: "/userdetails/:id/valid",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.operation.permission.getId",
    path: "/userdetails/:id/permission",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.patch",
    path: "/userdetails/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.operation.permission.patch",
    path: "/userdetails/:id/permission",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.operation.email.patch",
    path: "/userdetails/:id/email",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.userdetails.delete",
    path: "/userdetails/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.userdetails.getAll",
    path: "/userdetails",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.messages.post",
    path: "/messages",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.messages.operation.sendgrid-events.post",
    path: "/messages/sendgrid-events",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.messages.operation.twilio-sms-events.post",
    path: "/messages/twilio-sms-events",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.messages.getAll",
    path: "/messages",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.messages.getId",
    path: "/messages/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.messages.delete",
    path: "/messages/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.invoices.getId",
    path: "/invoices/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.invoices.getAll",
    path: "/invoices",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.invoices.post",
    path: "/invoices",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.invoices.patch",
    path: "/invoices/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.companies.getAll",
    path: "/companies",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.companies.getId",
    path: "/companies/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.companies.post",
    path: "/companies",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.companies.patch",
    path: "/companies/:id",
    method: ["PATCH"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.companies.delete",
    path: "/companies/:id",
    method: ["DELETE"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.uniqueitems.post",
    path: "/uniqueitems",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.uniqueitems.operation.generate.post",
    path: "/uniqueitems/generate",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.uniqueitems.getId",
    path: "/uniqueitems/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.uniqueitems.operation.active.getId",
    path: "/uniqueitems/:id/active",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.uniqueitems.getAll",
    path: "/uniqueitems",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.signatures.post",
    path: "/signatures",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.signatures.operation.guardian.post",
    path: "/signatures/guardian",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: [],
    name: "collection.signatures.operation.check-guardian-signature.post",
    path: "/signatures/check-guardian-signature",
    method: ["POST"],
    types: {} as unknown,
  },
  {
    params: ["id"],
    name: "collection.signatures.getId",
    path: "/signatures/:id",
    method: ["GET", "HEAD"],
    types: {} as unknown,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition,
};
